#The Options filed is neccessary when using a custom service account. It specifies the storage logging options for the build.

options:
  logging: GCS_ONLY
  logsBucket: gs://caranthir-archive 

steps:
- name: 'gcr.io/cloud-builders/git'
  entrypoint: 'sh'
  args:
  - '-c'
  - |
    git clone https://github.com/Gwenbleidd32/pipeline-test-2
    cd pipeline-test-2

- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', 'gcr.io/$PROJECT_ID/my-app:$COMMIT_SHA', '.'] #builds the image

- name: 'gcr.io/cloud-builders/docker'
  args: ['push', 'gcr.io/$PROJECT_ID/my-app:$COMMIT_SHA'] #push the image to Google Container Registry

- name: 'gcr.io/cloud-builders/gcloud'
  args: ['container', 'clusters', 'get-credentials', 'atreides-war-fleet', '--zone', 'europe-west10', '--project', 'pooper-scooper'] #Kubernetes log in information

- name: 'gcr.io/cloud-builders/kubectl'
  args: ['apply', '-f', 'k8s/deployment.yaml'] #apply the deployment

- name: 'gcr.io/cloud-builders/kubectl'
  args: ['apply', '-f', 'k8s/service.yaml'] #apply the service

images:
- 'gcr.io/$PROJECT_ID/my-app:$COMMIT_SHA'

#Take notice how this file is ordered. first step to last step. The image is pulled, caontainerized, and pushed to GCR.
#Then the login of kubernetes is automated, and then a deployment and service is applied.
#Match you Service account with the right permissions for kubectl to make this work.
#Note, When using a Custom Service account you need specify a bucket to store your generated build logs Or else the build will fail.